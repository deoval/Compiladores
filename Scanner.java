/* The following code was generated by JFlex 1.4.3 on 13/11/17 16:51 */

/* 
* A primeira seção da especificação vai até o primeiro %%,
* e consiste de código Java que é copiado ao pé da letra
*
*/
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.io.IOException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/11/17 16:51 from the specification file
 * <tt>minijava.jflex</tt>
 */
public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\4\1\0\2\1\22\0\1\1\1\34\4\0\1\36"+
    "\1\0\1\42\1\43\1\3\1\40\1\52\1\41\1\51\1\2\12\55"+
    "\1\0\1\50\1\37\1\35\3\0\22\53\1\25\7\53\1\44\1\0"+
    "\1\45\1\0\1\54\1\0\1\11\1\5\1\13\1\17\1\10\1\30"+
    "\1\27\1\32\1\22\2\53\1\7\1\24\1\12\1\6\1\20\1\53"+
    "\1\26\1\14\1\16\1\21\1\23\1\31\1\15\1\33\1\53\1\46"+
    "\1\0\1\47\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\20\5\1\6\1\7"+
    "\1\1\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\2\2\1\25"+
    "\14\5\1\26\7\5\1\27\1\30\1\31\1\32\4\5"+
    "\1\33\6\5\1\34\11\5\1\35\1\5\1\36\2\5"+
    "\1\37\1\40\1\5\1\41\1\42\10\5\1\43\5\5"+
    "\1\44\1\45\1\5\1\46\1\5\1\47\1\50\1\51"+
    "\1\5\1\52\1\53\1\54\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\2\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\134\0\212\0\134\0\270\0\346"+
    "\0\u0114\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256"+
    "\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6"+
    "\0\u03f4\0\134\0\134\0\134\0\134\0\134\0\134\0\134"+
    "\0\134\0\134\0\134\0\134\0\134\0\u0422\0\u0450\0\u047e"+
    "\0\134\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0"+
    "\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\346\0\u06d4\0\u0702"+
    "\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\134\0\134\0\134"+
    "\0\u0450\0\u0816\0\u0844\0\u0872\0\u08a0\0\346\0\u08ce\0\u08fc"+
    "\0\u092a\0\u0958\0\u0986\0\u09b4\0\346\0\u09e2\0\u0a10\0\u0a3e"+
    "\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\346\0\u0b80"+
    "\0\346\0\u0bae\0\u0bdc\0\346\0\346\0\u0c0a\0\346\0\346"+
    "\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a"+
    "\0\346\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\346\0\346"+
    "\0\u0e8e\0\346\0\u0ebc\0\346\0\346\0\346\0\u0eea\0\346"+
    "\0\346\0\346\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe"+
    "\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e"+
    "\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0\0\u12de"+
    "\0\134\0\346";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\4\1\7\1\10\1\11"+
    "\1\12\1\10\1\13\1\14\1\15\1\10\1\16\1\10"+
    "\1\17\1\10\1\20\1\21\1\22\1\23\1\24\1\10"+
    "\1\25\1\26\2\10\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\10\1\3\1\46\3\47\1\50\1\4"+
    "\51\47\61\0\1\51\57\0\1\10\1\52\25\10\17\0"+
    "\3\10\5\0\27\10\17\0\3\10\5\0\3\10\1\53"+
    "\23\10\17\0\3\10\5\0\2\10\1\54\5\10\1\55"+
    "\16\10\17\0\3\10\5\0\3\10\1\56\10\10\1\57"+
    "\12\10\17\0\3\10\5\0\2\10\1\60\24\10\17\0"+
    "\3\10\5\0\11\10\1\61\15\10\17\0\3\10\5\0"+
    "\21\10\1\62\3\10\1\63\1\10\17\0\3\10\5\0"+
    "\14\10\1\64\12\10\17\0\3\10\5\0\5\10\1\65"+
    "\15\10\1\66\3\10\17\0\3\10\5\0\1\10\1\67"+
    "\25\10\17\0\3\10\5\0\4\10\1\70\22\10\17\0"+
    "\3\10\5\0\11\10\1\71\14\10\1\72\17\0\3\10"+
    "\5\0\3\10\1\73\23\10\17\0\3\10\5\0\4\10"+
    "\1\74\22\10\17\0\3\10\5\0\25\10\1\75\1\10"+
    "\17\0\3\10\35\0\1\76\55\0\1\77\56\0\1\100"+
    "\74\0\1\46\4\47\1\0\53\47\1\101\1\47\1\0"+
    "\51\47\5\0\1\10\1\102\25\10\17\0\3\10\5\0"+
    "\5\10\1\103\21\10\17\0\3\10\5\0\7\10\1\104"+
    "\17\10\17\0\3\10\5\0\11\10\1\105\15\10\17\0"+
    "\3\10\5\0\24\10\1\106\2\10\17\0\3\10\5\0"+
    "\2\10\1\107\24\10\17\0\3\10\5\0\4\10\1\110"+
    "\22\10\17\0\3\10\5\0\4\10\1\111\22\10\17\0"+
    "\3\10\5\0\14\10\1\112\12\10\17\0\3\10\5\0"+
    "\15\10\1\113\11\10\17\0\3\10\5\0\1\114\26\10"+
    "\17\0\3\10\5\0\11\10\1\115\15\10\17\0\3\10"+
    "\5\0\15\10\1\116\11\10\17\0\3\10\5\0\15\10"+
    "\1\117\11\10\17\0\3\10\5\0\21\10\1\120\5\10"+
    "\17\0\3\10\5\0\7\10\1\121\17\10\17\0\3\10"+
    "\5\0\11\10\1\122\15\10\17\0\3\10\5\0\2\10"+
    "\1\123\24\10\17\0\3\10\5\0\15\10\1\124\11\10"+
    "\17\0\3\10\5\0\2\10\1\125\24\10\17\0\3\10"+
    "\5\0\22\10\1\126\4\10\17\0\3\10\5\0\3\10"+
    "\1\127\23\10\17\0\3\10\5\0\3\10\1\130\23\10"+
    "\17\0\3\10\5\0\2\10\1\131\24\10\17\0\3\10"+
    "\5\0\7\10\1\132\17\10\17\0\3\10\5\0\11\10"+
    "\1\133\15\10\17\0\3\10\5\0\3\10\1\134\23\10"+
    "\17\0\3\10\5\0\7\10\1\135\17\10\17\0\3\10"+
    "\5\0\2\10\1\136\24\10\17\0\3\10\5\0\12\10"+
    "\1\137\14\10\17\0\3\10\5\0\5\10\1\140\21\10"+
    "\17\0\3\10\5\0\15\10\1\141\11\10\17\0\3\10"+
    "\5\0\11\10\1\142\15\10\17\0\3\10\5\0\14\10"+
    "\1\143\12\10\17\0\3\10\5\0\7\10\1\144\17\10"+
    "\17\0\3\10\5\0\2\10\1\145\24\10\17\0\3\10"+
    "\5\0\3\10\1\146\23\10\17\0\3\10\5\0\11\10"+
    "\1\147\15\10\17\0\3\10\5\0\5\10\1\150\21\10"+
    "\17\0\3\10\5\0\7\10\1\151\17\10\17\0\3\10"+
    "\5\0\15\10\1\152\11\10\17\0\3\10\5\0\15\10"+
    "\1\153\11\10\17\0\3\10\5\0\5\10\1\154\21\10"+
    "\17\0\3\10\5\0\3\10\1\155\23\10\17\0\3\10"+
    "\5\0\21\10\1\156\5\10\17\0\3\10\5\0\3\10"+
    "\1\157\23\10\17\0\3\10\5\0\3\10\1\160\23\10"+
    "\17\0\3\10\5\0\4\10\1\161\22\10\17\0\3\10"+
    "\5\0\25\10\1\162\1\10\17\0\3\10\5\0\12\10"+
    "\1\163\14\10\17\0\3\10\5\0\6\10\1\164\20\10"+
    "\17\0\3\10\5\0\6\10\1\165\20\10\17\0\3\10"+
    "\5\0\22\10\1\166\4\10\17\0\3\10\5\0\17\10"+
    "\1\167\7\10\17\0\3\10\5\0\5\10\1\170\21\10"+
    "\17\0\3\10\5\0\5\10\1\171\21\10\17\0\3\10"+
    "\5\0\7\10\1\172\17\10\17\0\3\10\4\173\1\0"+
    "\27\174\17\173\3\174\6\0\1\175\54\0\1\10\1\176"+
    "\25\10\17\0\3\10\21\0\1\177\41\0\14\10\1\200"+
    "\12\10\17\0\3\10\16\0\1\201\44\0\11\10\1\202"+
    "\15\10\17\0\3\10\4\203\1\0\55\203\1\0\27\204"+
    "\17\203\3\204\20\0\1\205\42\0\13\10\1\206\13\10"+
    "\17\0\3\10\26\0\1\207\34\0\21\10\1\210\5\10"+
    "\17\0\3\10\22\0\1\211\40\0\15\10\1\212\11\10"+
    "\17\0\3\10\12\0\1\213\50\0\5\10\1\214\21\10"+
    "\17\0\3\10\16\0\1\215\44\0\11\10\1\216\15\10"+
    "\17\0\3\10\7\0\1\217\53\0\2\10\1\220\24\10"+
    "\17\0\3\10\12\0\1\221\50\0\5\10\1\222\21\10"+
    "\17\0\3\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4876];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\1\11\23\1\14\11\3\1\1\11"+
    "\24\1\3\11\72\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

	public Scanner() { }

	public void input(String input) {
	    // inicializa entrada pro analisador
		yyreset(new StringReader(input));
	}
	
	public List<Token> tokens() throws IOException {
		List<Token> tokens = new ArrayList<Token>();
		Token tok = nextToken();
		while(tok.getTipo() != Token.EOF) {
			tokens.add(tok);
			tok = nextToken();
		}
		tokens.add(tok);
		return tokens;
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 126) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 41: 
          { return new Token(Token.STRING, yytext(), yyline, yycolumn);
          }
        case 46: break;
        case 12: 
          { return new Token(')', yytext(), yyline, yycolumn);
          }
        case 47: break;
        case 14: 
          { return new Token(']', yytext(), yyline, yycolumn);
          }
        case 48: break;
        case 10: 
          { return new Token('-', yytext(), yyline, yycolumn);
          }
        case 49: break;
        case 30: 
          { return new Token(Token.NULL, yytext(), yyline, yycolumn);
          }
        case 50: break;
        case 20: 
          { return new Token(Token.NUM, yytext(), yyline, yycolumn);
          }
        case 51: break;
        case 23: 
          { return new Token(Token.NEQ, yytext(), yyline, yycolumn);
          }
        case 52: break;
        case 31: 
          { return new Token(Token.TRUE, yytext(), yyline, yycolumn);
          }
        case 53: break;
        case 45: 
          { return new Token(Token.PRINTLN, yytext(), yyline, yycolumn);
          }
        case 54: break;
        case 15: 
          { return new Token('{', yytext(), yyline, yycolumn);
          }
        case 55: break;
        case 5: 
          { return new Token(Token.ID, yytext(), yyline, yycolumn);
          }
        case 56: break;
        case 42: 
          { return new Token(Token.RETURN, yytext(), yyline, yycolumn);
          }
        case 57: break;
        case 11: 
          { return new Token('(', yytext(), yyline, yycolumn);
          }
        case 58: break;
        case 26: 
          { yybegin(YYINITIAL);
          }
        case 59: break;
        case 24: 
          { return new Token(Token.EQ, yytext(), yyline, yycolumn);
          }
        case 60: break;
        case 32: 
          { return new Token(Token.THIS, yytext(), yyline, yycolumn);
          }
        case 61: break;
        case 19: 
          { return new Token(',', yytext(), yyline, yycolumn);
          }
        case 62: break;
        case 21: 
          { yybegin(COMMENT);
          }
        case 63: break;
        case 29: 
          { return new Token(Token.ELSE, yytext(), yyline, yycolumn);
          }
        case 64: break;
        case 40: 
          { return new Token(Token.PUBLIC, yytext(), yyline, yycolumn);
          }
        case 65: break;
        case 43: 
          { return new Token(Token.BOOLEAN, yytext(), yyline, yycolumn);
          }
        case 66: break;
        case 22: 
          { return new Token(Token.IF, yytext(), yyline, yycolumn);
          }
        case 67: break;
        case 36: 
          { return new Token(Token.FALSE, yytext(), yyline, yycolumn);
          }
        case 68: break;
        case 1: 
          { throw new RuntimeException("erro léxico, linha: " + 
				               (yyline+1) + ", coluna : " + (yycolumn+1) + ", char: " + 
				               yytext());
          }
        case 69: break;
        case 25: 
          { return new Token(Token.AND, yytext(), yyline, yycolumn);
          }
        case 70: break;
        case 7: 
          { return new Token('=', yytext(), yyline, yycolumn);
          }
        case 71: break;
        case 38: 
          { return new Token(Token.LENGTH, yytext(), yyline, yycolumn);
          }
        case 72: break;
        case 13: 
          { return new Token('[', yytext(), yyline, yycolumn);
          }
        case 73: break;
        case 9: 
          { return new Token('+', yytext(), yyline, yycolumn);
          }
        case 74: break;
        case 35: 
          { return new Token(Token.CLASS, yytext(), yyline, yycolumn);
          }
        case 75: break;
        case 3: 
          { return new Token('/', yytext(), yyline, yycolumn);
          }
        case 76: break;
        case 27: 
          { return new Token(Token.NEW, yytext(), yyline, yycolumn);
          }
        case 77: break;
        case 8: 
          { return new Token('<', yytext(), yyline, yycolumn);
          }
        case 78: break;
        case 16: 
          { return new Token('}', yytext(), yyline, yycolumn);
          }
        case 79: break;
        case 37: 
          { return new Token(Token.WHILE, yytext(), yyline, yycolumn);
          }
        case 80: break;
        case 44: 
          { return new Token(Token.EXTENDS, yytext(), yyline, yycolumn);
          }
        case 81: break;
        case 4: 
          { return new Token('*', yytext(), yyline, yycolumn);
          }
        case 82: break;
        case 39: 
          { return new Token(Token.STATIC, yytext(), yyline, yycolumn);
          }
        case 83: break;
        case 6: 
          { return new Token('!', yytext(), yyline, yycolumn);
          }
        case 84: break;
        case 18: 
          { return new Token('.', yytext(), yyline, yycolumn);
          }
        case 85: break;
        case 28: 
          { return new Token(Token.INT, yytext(), yyline, yycolumn);
          }
        case 86: break;
        case 17: 
          { return new Token(';', yytext(), yyline, yycolumn);
          }
        case 87: break;
        case 34: 
          { return new Token(Token.MAIN, yytext(), yyline, yycolumn);
          }
        case 88: break;
        case 2: 
          { 
          }
        case 89: break;
        case 33: 
          { return new Token(Token.VOID, yytext(), yyline, yycolumn);
          }
        case 90: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return new Token(Token.EOF,"<<EOF>>", yyline, yycolumn);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
